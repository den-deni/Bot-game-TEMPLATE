import asyncio

from aiogram import F, Bot, Router
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram.enums import DiceEmoji

from motor.core import AgnosticDatabase as MDB

from keyboard.builder_kb import builder_keyboard
from utils.game_utils import get_card, calculate_score, get_dict


game_router = Router()



# –±–ª–æ–∫ —ñ–≥—Ä–∞ –≤ –∫—É–±—ñ–∫

@game_router.callback_query(F.data == 'dicegame')
async def get_roll(call: CallbackQuery, bot: Bot, db: MDB):
        bot_roll = await bot.send_dice(chat_id=call.from_user.id, emoji=DiceEmoji.DICE)
        bot_value = bot_roll.dice.value
        await asyncio.sleep(4)

        user_roll = await bot.send_dice(chat_id=call.from_user.id, emoji=DiceEmoji.DICE)
        user_value = user_roll.dice.value
        await asyncio.sleep(4)

        if user_value > bot_value:
            await db.profile2.update_one({"_id": call.from_user.id},
                                        {
                                            "$inc": {"points": 30}
                                        })
            await call.message.answer("–¢–∏ –≤–∏–≥—Ä–∞–≤ üéâ", reply_markup=builder_keyboard(
                 text=["–ö–∏–Ω—É—Ç–∏ —â–µüé≤", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è"],
                 callback=["dicegame", "back"],
                 sizes=2
                )
            )
            await call.answer(text="–¢–∏ –≤–∏–≥—Ä–∞–≤ +30 points", show_alert=True)
        elif user_value < bot_value:
            await call.message.answer("–ë–æ—Ç –≤–∏–≥—Ä–∞–≤! ü§ñ", reply_markup=builder_keyboard(
                 text=["–ö–∏–Ω—É—Ç–∏ —â–µüé≤", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è"],
                 callback=["dicegame", "back"],
                 sizes=2
                )
            )
            await call.answer()
        else:
            await call.message.answer("–ù—ñ—á—ñ—è! ü§ù", reply_markup=builder_keyboard(
                 text=["–ö–∏–Ω—É—Ç–∏ —â–µüé≤", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è"],
                 callback=["dicegame", "back"],
                 sizes=2
                )
            )
            await call.answer()

# –±–ª–æ–∫ —ñ–≥—Ä–∞ –≤ 21

@game_router.callback_query(F.data == 'playjack')
async def get_jack(call: CallbackQuery, db: MDB):
     player_hand = [get_card(), get_card()]
     dealer_hand = [get_card(), get_card()]
     player_score = calculate_score(player_hand)

     await db.gamejack.update_one(
          {"_id": call.from_user.id},
          {"$set": {
               "player_hand": player_hand,
               "dealer_hand": dealer_hand,
               "player_score": player_score
          }
        },
          upsert=True
     )

     await call.message.edit_text(f"{hbold('–¢–≤–æ—ó –∫–∞—Ä—Ç–∏:')}\n"
                                  f"{player_hand[0]}\n"
                                  f"{player_hand[1]}\n"
                                  f"{hbold('–í—Å—å–æ–≥–æ')}:{player_score}\n\n"
                                  f"{hbold('–ö–∞—Ä—Ç–∞ –±–æ—Ç–∞')}\n"
                                  f"{dealer_hand[0]}", reply_markup=builder_keyboard(
                                       ['–©–µ', '–ü–∞—Å'],
                                       ['hit', 'stand'],
                                       sizes=2
                                  )
                                )
     await call.answer()



@game_router.callback_query(F.data.in_({"hit", "stand"}))
async def handle_action(call: CallbackQuery, db: MDB):
    game = await db.gamejack.find_one({"_id": call.from_user.id})

    if not game:
        await call.message.answer("–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–Ω–æ ü§∑üèº‚Äç‚ôÇÔ∏è —Ç–∏—Å–Ω–∏ üëâ /start")
        return

    player_hand = game["player_hand"]
    dealer_hand = game["dealer_hand"]

    if call.data == "hit":
        # –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –µ—â–µ –∫–∞—Ä—Ç—É
        player_hand.append(get_card())
        player_score = calculate_score(player_hand)

        hand_str = '\n'.join(player_hand)
        


        await call.message.edit_text(f"{hbold('–¢–≤–æ—ó –∫–∞—Ä—Ç–∏:')}\n{hand_str}\n{hbold('–í—Å—å–æ–≥–æ:')}{player_score}")
        await call.answer()

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ MongoDB
        await db.gamejack.update_one(
            {"_id": call.from_user.id},
            {"$set": {"player_hand": player_hand, "player_score": player_score}}
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–±–æ—Ä
        if player_score > 21:
            await call.message.edit_text("–ü–µ—Ä–µ–±—ñ—Ä! –¢–∏ –ø—Ä–æ–≥—Ä–∞–≤", reply_markup=builder_keyboard(
                ['PlayüÉè', '–ú–µ–Ω—é —ñ–≥—Ä–∏', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è'],
                ['playjack', 'game', 'back'],
                sizes=2
            )
        )
            await db.gamejack.delete_one({"_id": call.from_user.id})
            return

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–æ–≤–∞ –≤—ã–±–æ—Ä
        await call.message.edit_text(f"{hbold('–¢–≤–æ—ó –∫–∞—Ä—Ç–∏:')}\n{hand_str}\n{hbold('–í—Å—å–æ–≥–æ:')}{player_score}\n"
                                     "=====================\n"
                                    f"{hbold('–ë–∞–∂–∞—î—à –≤–∑—è—Ç–∏ –∫–∞—Ä—Ç—É?')}\n",
                                    reply_markup=builder_keyboard(
                                    ['–©–µ', '–ü–∞—Å'],
                                    ['hit', 'stand'],
                                    sizes=2
                                )
                            )

    elif call.data == "stand":
        # –•–æ–¥ –¥–∏–ª–µ—Ä–∞
        while calculate_score(dealer_hand) < 17:
            dealer_hand.append(get_card())

        dealer_score = calculate_score(dealer_hand)
        player_score = calculate_score(player_hand)

        bot_str = "\n".join(dealer_hand)

        await call.message.answer(f"{hbold('–ö–∞—Ä—Ç–∏ –±–æ—Ç–∞:')}\n{bot_str}\n{hbold('–í—Å—å–æ–≥–æ:')}{dealer_score}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if dealer_score > 21 or player_score > dealer_score:
            await call.message.answer(f"{hbold('–í—ñ—Ç–∞—é —Ç–∏ –≤–∏–≥—Ä–∞–≤!üòÄ')}", reply_markup=builder_keyboard(
                ['PlayüÉè', '–ú–µ–Ω—é —ñ–≥—Ä–∏', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è'],
                ['playjack', 'game', 'back'],
                sizes=2
            )
        )
            await db.profile2.update_one({"_id": call.from_user.id},
                {
                    "$inc": {"points": 50}
                }
            )
            await call.answer(text='–¢–∏ –≤–∏–≥—Ä–∞–≤ +50 points', show_alert=True)
        elif player_score < dealer_score:
            await call.message.answer(f"{hbold('–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤üòü')}", reply_markup=builder_keyboard(
                ['PlayüÉè', '–ú–µ–Ω—é —ñ–≥—Ä–∏', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è'],
                ['playjack', 'game', 'back'],
                sizes=2
            )
        )
            await call.answer()
        else:
            await call.message.answer("–ù—ñ—á–∏—èü§ù", reply_markup=builder_keyboard(
                ['PlayüÉè', '–ú–µ–Ω—é —ñ–≥—Ä–∏', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚¨ÖÔ∏è'],
                ['playjack', 'game', 'back'],
                sizes=2
            )
        )
            await call.answer()

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await db.gamejack.delete_one({"_id": call.from_user.id})


# –±–ª–æ–∫ —ñ–≥—Ä–∞ –≤ –±—ñ—Ç–æ–∫
     
@game_router.callback_query(F.data == 'playbitcoin')
async def play_bitcoin(call: CallbackQuery, db: MDB):
    
        data = get_dict()
        name = data['index']
        price = data['price']
        await db.gamecoin.update_one(
            {"_id": call.from_user.id},
            {"$inc": {"userprice": price}},
        upsert=True
        )
        await call.message.edit_text(f"{hbold('–¶—ñ–Ω–∞ BTC')}:{price}$\n"
                                     f"{hbold('–í–∏–±–µ—Ä–∏ –∫—É–¥–∏ –ø—ñ–¥–µ —Ü—ñ–Ω–∞ –≤–µ—Ä—Ö –∞–±–æ –≤–Ω–∏–∑')}", reply_markup=builder_keyboard(
            ['‚¨ÜÔ∏è', '‚¨áÔ∏è', '–ù–∞–∑–∞–¥‚¨ÖÔ∏è'],
            ['up', 'down', 'back'],
            sizes=2
        )
    )
       
    


@game_router.callback_query(F.data.in_({'up', 'down'}))
async def choice_currency(call: CallbackQuery, db: MDB):
    data = get_dict()
    price = data['price']
    user = await db.gamecoin.find_one(
        {
            "_id": call.from_user.id
        }
    )
    userprice = user['userprice']

    if call.data == 'up':
        if price > userprice:
            await call.message.edit_reply_markup(reply_markup=builder_keyboard(
                ['BitCoinüí∏', '–ù–∞–∑–∞–¥‚¨ÖÔ∏è'],
                ['playbitcoin', 'back'],
                sizes=2
            )
        )
            await call.answer(text='–¢–∏ –≤–∏–≥—Ä–∞–≤ +100 points', show_alert=True)
            await db.profile2.update_one(
                {"_id": call.from_user.id},
                {"$inc": {"points": 100}}
            )
        else:
            await call.message.edit_reply_markup(reply_markup=builder_keyboard(
                ['BitCoinüí∏', '–ù–∞–∑–∞–¥‚¨ÖÔ∏è'],
                ['playbitcoin', 'back'],
                sizes=2
            )
        )
            await call.answer(text=f'–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤\n{price}', show_alert=True)

    elif call.data == 'down':
        if price < userprice:
            await call.message.edit_reply_markup(reply_markup=builder_keyboard(
                ['BitCoinüí∏', '–ù–∞–∑–∞–¥‚¨ÖÔ∏è'],
                ['playbitcoin', 'back'],
                sizes=2
            )
        )
            await call.answer(text='–¢–∏ –≤–∏–≥—Ä–∞–≤ 100 points', show_alert=True)
            await db.profile2.update_one(
                {"_id": call.from_user.id},
                {"$inc": {"points": 100}}
            )

        else:
            await call.message.edit_reply_markup(reply_markup=builder_keyboard(
                ['BitCoinüí∏', '–ù–∞–∑–∞–¥‚¨ÖÔ∏è'],
                ['playbitcoin', 'back'],
                sizes=2
            )
        )
            await call.answer(text=f'–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤\n{price}', show_alert=True)

    await db.gamecoin.delete_one(
                {"_id": call.from_user.id}
            )