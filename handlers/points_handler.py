from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold

from motor.core import AgnosticDatabase as MDB

from keyboard.builder_kb import builder_keyboard


points_router = Router()


@points_router.callback_query(F.data == 'exchanger')
async def get_exchanger(call: CallbackQuery, db: MDB):
    user = await db.profile2.find_one(
        {"_id": call.from_user.id}
    )
    points = user['points']
    if points < 1000:
        await call.answer('1 üíé = 1000 points\n–í—Ç–µ–±–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç—å–Ω–æ points –≥—Ä–∞–π –¥–∞–ª—ñ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π', show_alert=True)
    else:
        await call.message.edit_text(text=f"{hbold('–ë–∞–∂–∞—î—à –ø—Ä–∏–¥–±–∞—Ç–∏ üíé')}", reply_markup=builder_keyboard(
            ['–ö—É–ø–∏—Ç–∏ üíé', '–ù–∞–∑–∞–¥‚¨ÖÔ∏è'],
            ['bay', 'back'],
            sizes=2
        )
    )
        
@points_router.callback_query(F.data == 'bay')
async def bay_diamond(call: CallbackQuery, db: MDB):
    user = await db.profile2.find_one(
        {"_id": call.from_user.id}
    )
    balance = user['points']
    if balance >= 1000:
        await db.profile2.update_one(
            {"_id": call.from_user.id},
            {"$inc": {'points': -1000,
                      "diamond": 1},
            }
        )
        await call.answer('–¢–∏ –±—Ä–∏–¥–±–∞–≤ 1 üíé\n -1000 points', show_alert=True)
    else:
        await call.answer('–ù–µ–≤–∏—Å—Ç–∞—á–∞—î points', show_alert=True)
